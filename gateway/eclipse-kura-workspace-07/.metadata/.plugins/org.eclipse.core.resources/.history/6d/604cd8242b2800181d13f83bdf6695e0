package org.eclipse.kura.demo.heater;
 
import java.util.Date;
 
import org.eclipse.kura.KuraException;
import org.eclipse.kura.cloud.CloudClient;
import org.eclipse.kura.cloud.CloudService;
import org.eclipse.kura.message.KuraPayload;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
 
public class DataPublisher {
    
    public String topic="SensorData";
    public int qos=2;// quality of service
    public boolean retain =false;
    public final String appID="DataCollector";
    public final String watchmanID="WatchmanCollector";
    public final String solarID="SolarCollector";
    public final String accID="AccCollector";
    public final String trainID="TrainCollector";
 
    private CloudClient cloudClient;
    private CloudClient watchmanClient;
    private CloudClient solarClient;
    private CloudClient accClient;
    private CloudClient trainClient;
    
    private static final Logger logger = LoggerFactory.getLogger(Heater.class);
    
    public DataPublisher(CloudService cloudService) throws KuraException {
    
        logger.info("creating publisher...");
        cloudClient=cloudService.newCloudClient(appID);
        accClient=cloudService.newCloudClient(accID);
        solarClient=cloudService.newCloudClient(solarID);
        watchmanClient=cloudService.newCloudClient(watchmanID);
        trainClient=cloudService.newCloudClient(trainID);
        logger.info("creating publisher...Done");
    
    }    
    
    public void publishData(SensorData data) throws Exception{
        
        logger.info("--------start to publishing normal data...");
        KuraPayload payload=new KuraPayload();
 
        logger.info("--------add data metric data...");
 
        payload.addMetric("RedLight", (data.RedLight));
        payload.addMetric("GreenLight", (data.GreenLight));
        payload.addMetric("RedLight", (data.BlueLight));
 
        payload.addMetric("AccX", (data.AccX));
        payload.addMetric("AccY", (data.AccY));
        payload.addMetric("AccZ", (data.AccZ));
 
        payload.addMetric("Light", data.Light);
 
        payload.addMetric("Infra1", data.Infra1);
        payload.addMetric("Infra2", data.Infra2);
        
        payload.addMetric("SensorID", data.SensorID);
        payload.addMetric("MicroTimeStamp", data.MicroTimeStamp);
 
        logger.info("--------publishing add date metric data...");
        payload.setTimestamp(new Date());
 
        logger.info("--------publishing data...");
        this.cloudClient.publish(topic,payload, qos, retain);
        logger.info("success!");
        
        
    }
 
    public void publishData(WatchmanData data) throws Exception{
        
        logger.info("--------start to publishing WatchmanData...");
        KuraPayload payload=new KuraPayload();
        
        payload.addMetric("SensorID", data.SensorID);
        payload.addMetric("MicroTimeStamp", data.MicroTimeStamp);
        payload.addMetric("Type","Watchman");
 
        logger.info("--------publishing add date metric data...");
        payload.setTimestamp(new Date());
        
 
        logger.info("--------add data metric data...");
 
        payload.addMetric("RedLight", (data.RedLight));
        payload.addMetric("GreenLight", (data.GreenLight));
        payload.addMetric("RedLight", (data.BlueLight));
 
        payload.addMetric("AccX", (data.AccX));
        payload.addMetric("AccY", (data.AccY));
        payload.addMetric("AccZ", (data.AccZ));
 
        payload.addMetric("Light", data.Light);
 
        payload.addMetric("Infra1", data.Infra1);
        payload.addMetric("Infra2", data.Infra2);
 
        logger.info("--------publishing data...");
        //this.cloudClient.publish(topic,payload, qos, retain);
        this.watchmanClient.publish(topic,payload, qos, retain);
        logger.info("success!");
        
        if(true) {
            logger.info("train is coaught");
            KuraPayload trainpl=new KuraPayload();
            trainpl.addMetric("SensorID", data.SensorID);
            trainpl.addMetric("Type", "WatchmanSensor");
            trainpl.setTimestamp(new Date());
            trainpl.addMetric("Presense", data.Infra1);
            logger.info("--------publishing train...");
            //this.cloudClient.publish(topic,payload, qos, retain);
            this.trainClient.publish(topic,trainpl, qos, retain);
            logger.info("success!");
        }
        
    }
    
    public void publishData(SolarData data) throws Exception{
        
        logger.info("--------start to publishing SolarData...");
        KuraPayload payload=new KuraPayload();
        
        payload.addMetric("SensorID", data.SensorID);
        payload.addMetric("MicroTimeStamp", data.MicroTimeStamp);
        
        payload.addMetric("Volt", data.Volt);
 
        logger.info("--------publishing add date metric data...");
        payload.setTimestamp(new Date());
 
        logger.info("--------publishing data...");
        //this.cloudClient.publish(topic,payload, qos, retain);
        this.solarClient.publish(topic,payload, qos, retain);
        logger.info("success!");
        
    }
 
    public void publishData(AccData data) throws Exception{
        
        logger.info("--------start to publishing AccData...");
        KuraPayload payload=new KuraPayload();
        
        payload.addMetric("SensorID", data.SensorID);
        payload.addMetric("MicroTimeStamp", data.MicroTimeStamp);
 
        payload.addMetric("AccX", data.AccX);
        payload.addMetric("AccY", data.AccY);
        payload.addMetric("AccZ", data.AccZ);
 
        logger.info("--------publishing add date metric data...");
        payload.setTimestamp(new Date());
 
        logger.info("--------publishing data...");
 
        this.accClient.publish(topic,payload, qos, retain);
        //this.cloudClient.publish(topic,payload, qos, retain);
        logger.info("success!");
        
    }
    
    public void publishData(DHTData data) throws Exception{
        
        logger.info("--------start to publishing DHTData...");
        KuraPayload payload=new KuraPayload();
        
        payload.addMetric("SensorID", data.SensorID);
        payload.addMetric("MicroTimeStamp", data.MicroTimeStamp);
 
        payload.addMetric("Humidity", data.Humidity);
        payload.addMetric("Temperature", data.Temperature);
 
        logger.info("--------publishing add date metric data...");
        payload.setTimestamp(new Date());
 
        logger.info("--------publishing data...");
        this.cloudClient.publish(topic,payload, qos, retain);
        logger.info("success!");
        
    }
    
    public void open() throws Exception {
    }
    
    public void close() {
        this.cloudClient.release();
    }
 
}


