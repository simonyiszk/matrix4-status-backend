package org.eclipse.kura.demo.heater;


import java.net.*;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import org.eclipse.kura.cloud.CloudService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.gson.Gson;

import java.io.*;


public class TCPDataCollector extends Thread {

    private static final Logger logger = LoggerFactory.getLogger(Heater.class);
    public  int serverPort=5502;
    protected ServerSocket serverSocket;
    private static final int jsonLimit=1024;
    private ScheduledExecutorService m_worker;
    
    
    private DataPublisher dataPublisher;
    
    private void notifylog() {
    	logger.info("******************notify******************");
    	logger.info("******************notify******************");
    	logger.info("******************notify******************");
    	logger.info("******************notify******************");
    	logger.info("******************notify******************");
    	logger.info("******************notify******************");
    }
    
    
    
    public TCPDataCollector(CloudService cloudService, ScheduledExecutorService worker) {
    	m_worker=worker;
    	try {
    		logger.info("creating Publisher...");
    		dataPublisher=new DataPublisher(cloudService);
    		logger.info("creating Publisher...Done");
    	}catch(Exception e) {
    		notifylog();
    		logger.info(e.toString());
    	}
    	
    	
    	logger.info("data collector server...");
    	initServer();
    	logger.info("data collector server...Done");
    	

    	
    }
    
    
    private void initServer() {

    	logger.info("initalising TCP Data Collector...");
    	try {
    		serverSocket=new ServerSocket(serverPort);
    		logger.info("Server socket is created. :");
    		logger.info("Port is:"+Integer.toString(serverSocket.getLocalPort()));
    	}catch(IOException e) {
    		notifylog();
    		logger.info(e.toString());
    	}
    	
    	
    }
    
    public void setPort(int port) {
    	logger.info("set server port...");
    	serverPort=port;
    	initServer();
    	logger.info("set server port...Done");
    }
    
    
    public void run() {
        //Thread.currentThread().setName(getClass().getSimpleName());
    		
    	while(true) {
    		try {
    			Socket connection=serverSocket.accept();
    			ClientHandler client=new ClientHandler(connection);
    			//m_worker.schedule(client, 0, TimeUnit.MILLISECONDS);
    			client.start();
    		}catch(IOException e) {
    			notifylog();
    			logger.info(e.toString());
    		}
    	}
    	
    }
    
    
    
    
    
	private class ClientHandler extends Thread{
		Socket m_connection;
		StringBuffer inBuffer=new StringBuffer("");

		public static final char startSign='{';
		public static final char stopSign='}';
		
		
		public ClientHandler(Socket connection) {
			
			logger.info("new client has connected...");
			logger.info(connection.getInetAddress().toString());
			
			m_connection=connection;
			
		}
		
		
		public void run() {
            Thread.currentThread().setName(getClass().getSimpleName());
			try {
				//OutputStream os=m_connection.getOutputStream();
				//m_connection.close();
				InputStream is=m_connection.getInputStream();
				int counter=0;
				while(true) {
					while((char)(is.read())!=startSign);
					logger.info("incoming json is caught-----------------------------");
					inBuffer.append('{');
					char in;
					do {
						in=(char) is.read();
						inBuffer.append(in);
					}while(in!=stopSign && counter<jsonLimit);
					logger.info("reading incoming json is successful-----------------");
					logger.info(inBuffer.toString());
					Gson gson=new Gson();
					/*SensorData inData=gson.fromJson(inBuffer.toSmhvtring(), SensorData.class);
					logger.info(inData.Type.toString());
					logger.info(new Integer(inData.SensorID).toString());
					
					
					try {
						
						dataPublisher.publishData(inData);
					}catch(Exception e) {
					
						logger.info(e.toString());
					}
					*/
					
					try {
						
						Data indat=gson.fromJson(inBuffer.toString(), Data.class);
						
						if(indat.Type.compareTo("WatchmanData")==0) {
							logger.info("type has recognised");
							WatchmanData data=gson.fromJson(inBuffer.toString(), WatchmanData.class);
							dataPublisher.publishData(data);
						}
						
						if(indat.Type.compareTo("SolarData")==0) {
							logger.info("type has recognised");
							SolarData data=gson.fromJson(inBuffer.toString(), SolarData.class);
							dataPublisher.publishData(data);
						}
						
						if(indat.Type.compareTo("AccData")==0) {
							logger.info("type has recognised");
							AccData data=gson.fromJson(inBuffer.toString(),AccData.class);
							dataPublisher.publishData(data);
						}
						
					}catch(Exception e) {
						logger.info(e.toString());
						m_connection.close();
					}
				}
			}catch(IOException e) {
				logger.info(e.toString());
			}
		}
		
		
	}
	
}
